# -*- coding: utf-8 -*-
"""ProiectStatistica

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OBVWUOlke-fVwCXpDzf3SSZ2YIiY_fdQ

**1) Folosindu-vă de simulare(10^6 valori), estimați următoarele cantități, iar acolo unde
este posibil, comparați cu rezultatul teoretic:**

a) Probabilitatea de a cȃștiga din prima ȋncercare, cu un bilet simplu, la fiecare dintre
categoriile posibile de cȃștig.
"""

# Definirea probabilităților teoretice pentru fiecare categorie de câștig
p_castig_3 <- dbinom(1:49, 3, 1/49)
p_castig_4 <- dbinom(1:49, 4, 1/49)
p_castig_5 <- dbinom(1:49, 5, 1/49)
p_castig_6 <- dbinom(1:49, 6, 1/49)
probabilitati_teoretice <- c(p_castig_3, p_castig_4 - p_castig_3, p_castig_5 - p_castig_4, p_castig_6 - p_castig_5)

# Funcție pentru a simula extragerile și a estima probabilitățile simulate
simuleaza_probabilitati_simulate <- function(numar_categorii, numar_simulare) {
  probabilitati_simulate <- numeric(numar_categorii)
  for (i in 1:numar_simulare) {
    extragere <- sample(1:49, 6)
    numar_ghicite <- sum(extragere %in% sample(1:49, numar_categorii))
    if (numar_ghicite <= numar_categorii) {
      probabilitati_simulate[numar_ghicite] <- probabilitati_simulate[numar_ghicite] + 1
    }
  }
  probabilitati_simulate <- probabilitati_simulate / numar_simulare
  return(probabilitati_simulate)
}

# Simulează pentru 10^6 valori și afișează rezultatele
probabilitati_simulate <- simuleaza_probabilitati_simulate(4, 10^6)

# Afișarea rezultatelor
for (i in 1:length(probabilitati_simulate)) {
  cat(sprintf("Probabilitatea simulată de câștig în categoria: %d este %.6f\n", i, probabilitati_simulate[i]))
  cat(sprintf("Probabilitatea teoretică de câștig în categoria: %d este %.6f\n", i, probabilitati_teoretice[i]))
  cat("---\n")
}

# Functie pentru a calcula probabilitatea teoretica de castig
probabilitati_binomiale <- function() {
  p_castig_3 <- dbinom(3, 6, 6/49)
  p_castig_4 <- dbinom(4, 6, 6/49)
  p_castig_5 <- dbinom(5, 6, 6/49)
  p_castig_6 <- dbinom(6, 6, 6/49)

  probabilitati <- c(p_castig_3, p_castig_4 - p_castig_3, p_castig_5 - p_castig_4, p_castig_6 - p_castig_5)
  return(probabilitati)
}

# Functie pentru a simula extragerile si a estima probabilitatile
simuleaza_si_compara_optimizat <- function(iteratii) {
  castiguri_simulate <- rbinom(iteratii, 6, 6/49)

  castiguri_simulate[castiguri_simulate == 3] <- 1
  castiguri_simulate[castiguri_simulate == 4] <- 2
  castiguri_simulate[castiguri_simulate == 5] <- 3
  castiguri_simulate[castiguri_simulate == 6] <- 4

  probabilitati_simulate <- table(castiguri_simulate) / iteratii
  probabilitati_simulate <- as.numeric(probabilitati_simulate)

  return(probabilitati_simulate)
}

# Simuleaza pentru 10^6 valori
probabilitati_simulate_binomiale_optimizat <- simuleaza_si_compara_optimizat(10^6)

# Calculati probabilitatile teoretice
probabilitati_teoretice_binomiale <- probabilitati_binomiale()

# Afiseaza rezultatele
for (i in 1:length(probabilitati_simulate_binomiale_optimizat)) {
  cat(sprintf("Probabilitatea simulată de câștig în categoria %d: %.6f\n", i, probabilitati_simulate_binomiale_optimizat[i]))
  cat(sprintf("Probabilitatea teoretică de câștig în categoria %d: %.6f\n", i, probabilitati_teoretice_binomiale[i]))
  cat("---\n")
}

p_castig_3 <- dbinom(3, 6, 1/49)
p_castig_4 <- dbinom(4, 6, 1/49)
p_castig_5 <- dbinom(5, 6, 1/49)
p_castig_6 <- dbinom(6, 6, 1/49)
probabilitati_teoretice <- c(p_castig_3, p_castig_4 - p_castig_3, p_castig_5 - p_castig_4, p_castig_6 - p_castig_5)

simuleaza_si_compara_optimizat <- function(iteratii) {
  castiguri_simulate <- rbinom(iteratii, 6, 1/49)

  castiguri_simulate[castiguri_simulate == 3] <- 1
  castiguri_simulate[castiguri_simulate == 4] <- 2
  castiguri_simulate[castiguri_simulate == 5] <- 3
  castiguri_simulate[castiguri_simulate == 6] <- 4

  probabilitati_simulate <- hist(castiguri_simulate, breaks = seq(0, 4, by = 1), plot = FALSE)$density / iteratii
  return(probabilitati_simulate)
}

probabilitati_simulate_bin <- simuleaza_si_compara_optimizat(10^6)

for (i in 1:length(probabilitati_simulate_bin)) {
  cat(sprintf("Probabilitatea simulată de câștig în categoria %d: %f\n", i, probabilitati_simulate_bin[i]))
  cat(sprintf("Probabilitatea teoretică de câștig în categoria %d: %f\n", i, probabilitati_teoretice[i]))
  cat("---\n")
}

"""b) Probabilitatea de a cȃștiga după k ȋncercări(k fiind un parametru), cu un bilet
simplu, la fiecare dintre categoriile posibile de cȃștig.
"""

# Functie pentru a calcula probabilitatea de castig dupa k incercari pentru fiecare categorie
probabilitati_dupa_k_incercari <- function(k) {
  p_castig_3 <- pbinom(3 - 1, k, 1/13983816)
  p_castig_4 <- diff(pbinom(c(4, 3), k, 1/13983816))
  p_castig_5 <- diff(pbinom(c(5, 4), k, 1/13983816))
  p_castig_6 <- diff(pbinom(c(6, 5), k, 1/13983816))

  probabilitati <- c(p_castig_3, p_castig_4, p_castig_5, p_castig_6)
  return(probabilitati)
}

# Functie pentru a simula extragerile si a estima probabilitatile dupa un numar dat de incercari
simuleaza_si_compara_dupa_k_incercari <- function(k, iteratii) {
  castiguri_simulate <- matrix(rbinom(4 * iteratii, k, 1/13983816), nrow = iteratii)

  castiguri_simulate[castiguri_simulate == 3] <- 1
  castiguri_simulate[castiguri_simulate == 4] <- 2
  castiguri_simulate[castiguri_simulate == 5] <- 3
  castiguri_simulate[castiguri_simulate == 6] <- 4

  probabilitati_simulate <- apply(castiguri_simulate, 2, function(x) sum(x == 1) / iteratii)

  return(probabilitati_simulate)
}

# Simuleaza pentru 10^6 valori
numar_incercari <- 10
probabilitati_simulate_dupa_k <- simuleaza_si_compara_dupa_k_incercari(numar_incercari, 10^6)

# Probabilitati teoretice
probabilitati_teoretice_dupa_k <- probabilitati_dupa_k_incercari(numar_incercari)

# Afiseaza rezultatele
for (i in 1:length(probabilitati_simulate_dupa_k)) {
  cat(sprintf("Probabilitatea simulată de câștiga categoria %d după %d încercări: %.6f\n", i, numar_incercari, probabilitati_simulate_dupa_k[i]))
  cat(sprintf("Probabilitatea teoretică de câștig în categoria %d după %d încercări: %.6f\n", i, numar_incercari, probabilitati_teoretice_dupa_k[i]))
  cat("---\n")
}

probabilitate_castig_dupa_k_incercari <- function(k, numar_extrageri) {
  # Probabilitatea de a câștiga după k încercări pentru fiecare categorie de câștig
  numere_extrase <- k * numar_extrageri
  probabilitati <- numeric(4)
  succes_prob <- 6/49

  probabilitati[1] <- 1 - pbinom(2, numere_extrase, succes_prob)
  probabilitati[2] <- pbinom(3, numere_extrase, succes_prob) - pbinom(2, numere_extrase, succes_prob)
  probabilitati[3] <- pbinom(4, numere_extrase, succes_prob) - pbinom(3, numere_extrase, succes_prob)
  probabilitati[4] <- pbinom(6, numere_extrase, succes_prob) - pbinom(4, numere_extrase, succes_prob)

  return(probabilitati)
}


simuleaza_si_compara_dupa_k_incercari <- function(k, numar_simulare, numar_extrageri) {
  # Simularea și comparația pentru probabilitatea de a câștiga după k încercări

  # Calculul probabilităților teoretice
  probabilitati_teoretice <- probabilitate_castig_dupa_k_incercari(k, numar_extrageri)

  # Simularea
  castiguri_simulate <- replicate(numar_simulare, {
    castig <- sum(sample(1:49, 6, replace = FALSE) %in% sample(1:49, 6, replace = FALSE))
    return(castig)
  })

  # Calculul probabilităților simulate
  probabilitati_simulate <- table(castiguri_simulate) / numar_simulare

  # Afișarea rezultatelor
  for (i in 1:4) {  # Iterăm doar prin primele 4 categorii
    cat(sprintf("Categorie: %d\n", i))
    cat(sprintf("Probabilitatea simulată de câștig: %.6f\n", probabilitati_simulate[i]))
    cat(sprintf("Probabilitatea teoretică de câștig: %.6f\n", probabilitati_teoretice[i]))
    cat("---\n")
  }
}

# Exemplu de utilizare: simulare și comparație după 5 încercări, cu 10^6 simulări și 2 extrageri pe săptămână
simuleaza_si_compara_dupa_k_incercari(5, 10^6, 2)

"""c) Probabilitatea de a cȃștiga de r ori din k ȋncercări(r și k fiind parametri), cu un bilet
simplu, la fiecare dintre categoriile posibile de cȃștig
"""

# Functie pentru a calcula probabilitatea teoretica de a castiga de r ori din k incercari pentru fiecare categorie
probabilitati_r_ori_din_k <- function(r, k) {
  p_castig_3 <- dnbinom(r, k, 1/13983816)
  p_castig_4 <- dnbinom(r, k, 1/13983816)
  p_castig_5 <- dnbinom(r, k, 1/13983816)
  p_castig_6 <- dnbinom(r, k, 1/13983816)

  probabilitati <- c(p_castig_3, p_castig_4 - p_castig_3, p_castig_5 - p_castig_4, p_castig_6 - p_castig_5)
  return(probabilitati)
}

# Functie pentru a simula extragerile si a estima probabilitatile de a castiga de r ori din k incercari
simuleaza_si_compara_r_ori_din_k <- function(r, k, iteratii) {
  castiguri_simulate <- matrix(rbinom(4 * iteratii, k, 1/13983816), nrow = iteratii)

  castiguri_simulate[castiguri_simulate == 3] <- 1
  castiguri_simulate[castiguri_simulate == 4] <- 2
  castiguri_simulate[castiguri_simulate == 5] <- 3
  castiguri_simulate[castiguri_simulate == 6] <- 4

  probabilitati_simulate <- apply(castiguri_simulate, 1, function(x) sum(x == r) / length(x))

  return(probabilitati_simulate)
}

# Functie pentru a calcula probabilitatea teoretica de a castiga de r ori dupa k esecuri pentru fiecare categorie
probabilitati_r_dupa_k_esecuri <- function(r, k) {
  p_castig_3 <- dnbinom(k, r, 1/13983816)
  p_castig_4 <- dnbinom(k, r, 1/13983816)
  p_castig_5 <- dnbinom(k, r, 1/13983816)
  p_castig_6 <- dnbinom(k, r, 1/13983816)

  probabilitati <- c(p_castig_3, p_castig_4 - p_castig_3, p_castig_5 - p_castig_4, p_castig_6 - p_castig_5)
  return(probabilitati)
}

# Simuleaza si compara pentru 10^6 valori, pentru r = 2, k = 10
r <- 2
k <- 10
probabilitati_simulate_r_2_din_k_10 <- simuleaza_si_compara_r_ori_din_k(r, k, 10^6)

# Calculati probabilitatile teoretice
probabilitati_teoretice_r_2_din_k_10 <- probabilitati_r_ori_din_k(r, k)

# Afiseaza rezultatele
for (i in 1:length(probabilitati_simulate_r_2_din_k_10)) {
  cat(sprintf("Probabilitatea simulată de a câștiga de %d ori din %d încercări în categoria %d: %.6f\n", r, k, i, probabilitati_simulate_r_2_din_k_10[i]))
  cat(sprintf("Probabilitatea teoretică de a câștiga de %d ori din %d încercări în categoria %d: %.6f\n", r, k, i, probabilitati_teoretice_r_2_din_k_10[i]))
  cat("---\n")
}

probabilitate_castig_dupa_r_din_k_incercari <- function(r, k, numar_extrageri) {
  # Probabilitatea de a câștiga de r ori din k încercări pentru fiecare categorie de câștig
  numere_extrase <- k * numar_extrageri
  probabilitati <- numeric(4)
  succes_prob <- 6/49

  probabilitati[1] <- 1 - pbinom(2, numere_extrase, succes_prob)
  probabilitati[2] <- pbinom(3, numere_extrase, succes_prob) - pbinom(2, numere_extrase, succes_prob)
  probabilitati[3] <- pbinom(4, numere_extrase, succes_prob) - pbinom(3, numere_extrase, succes_prob)
  probabilitati[4] <- pbinom(6, numere_extrase, succes_prob) - pbinom(4, numere_extrase, succes_prob)

  probabilitati_categorii <- numeric(4)
  for (i in 1:4) {
    probabilitati_categorii[i] <- dbinom(r, k, probabilitati[i])
  }

  return(probabilitati_categorii)
}

simuleaza_si_compara_dupa_r_din_k_incercari <- function(r, k, numar_simulare, numar_extrageri) {
  # Simularea și comparația pentru probabilitatea de a câștiga de r ori din k încercări

  # Calculul probabilităților teoretice
  probabilitati_teoretice <- probabilitate_castig_dupa_r_din_k_incercari(r, k, numar_extrageri)

  # Simularea
  castiguri_simulate <- replicate(numar_simulare, {
    castig <- sum(sample(1:49, 6, replace = FALSE) %in% sample(1:49, 6, replace = FALSE))
    return(castig)
  })

  # Calculul probabilităților simulate
  probabilitati_simulate <- table(castiguri_simulate)
  probabilitati_simulate <- probabilitati_simulate / numar_simulare

  # Afișarea rezultatelor
  for (i in 1:4) {
    cat(sprintf("Categorie: %d\n", i))
    cat(sprintf("Probabilitatea simulată de câștig: %.6f\n", probabilitati_simulate[i]))
    cat(sprintf("Probabilitatea teoretică de câștig: %.6f\n", probabilitati_teoretice[i]))
    cat("---\n")
  }
}

# Exemplu de utilizare: simulare și comparație pentru a câștiga de 3 ori din 5 încercări, cu 10^6 simulări și 2 extrageri pe săptămână
simuleaza_si_compara_dupa_r_din_k_incercari(3, 5, 10^6, 2)

"""d) Probabilitatea de a cȃștiga de r ori după k eșecuri(r și k fiind parametri), cu un bilet
simplu, la fiecare dintre categoriile posibile de cȃștig.
"""

# Functie pentru a calcula probabilitatea teoretica de a castiga de r ori dupa k esecuri pentru fiecare categorie
probabilitati_r_dupa_k_esecuri <- function(r, k) {
  p_castig_3 <- dnbinom(k, r, 1/13983816)
  p_castig_4 <- dnbinom(k, r, 1/13983816)
  p_castig_5 <- dnbinom(k, r, 1/13983816)
  p_castig_6 <- dnbinom(k, r, 1/13983816)

  probabilitati <- c(p_castig_3, p_castig_4 - p_castig_3, p_castig_5 - p_castig_4, p_castig_6 - p_castig_5)
  return(probabilitati)
}

# Exemplu de calcul pentru r = 2, k = 10
r <- 2
k <- 10
probabilitati_r_dupa_k_2_esecuri_10 <- probabilitati_r_dupa_k_esecuri(r, k)

# Afisare rezultate
for (i in 1:length(probabilitati_r_dupa_k_2_esecuri_10)) {
  cat(sprintf("Probabilitatea de a câștiga de %d ori după %d eșecuri în categoria %d: %.6f\n", r, k, i, probabilitati_r_dupa_k_2_esecuri_10[i]))
  cat("---\n")
}

probabilitate_castig_dupa_r_din_k_esecuri <- function(r, k, numar_extrageri) {
  numere_extrase <- numar_extrageri + k  # Numărul total de extrageri necesare pentru a obține k eșecuri
  probabilitati <- numeric(4)
  succes_prob <- 6/49

  probabilitati[1] <- 1 - pbinom(2, numere_extrase, succes_prob)
  probabilitati[2] <- pbinom(3, numere_extrase, succes_prob) - pbinom(2, numere_extrase, succes_prob)
  probabilitati[3] <- pbinom(4, numere_extrase, succes_prob) - pbinom(3, numere_extrase, succes_prob)
  probabilitati[4] <- pbinom(6, numere_extrase, succes_prob) - pbinom(4, numere_extrase, succes_prob)

  probabilitati_categorii <- numeric(4)
  for (i in 1:4) {
    probabilitati_categorii[i] <- pbinom(r, numere_extrase, probabilitati[i])
  }

  return(probabilitati_categorii)
}

simuleaza_si_compara_dupa_r_din_k_esecuri <- function(r, k, numar_simulare, numar_extrageri) {
  # Simularea și comparația pentru probabilitatea de a câștiga de r ori după k eșecuri

  # Calculul probabilităților teoretice
  probabilitati_teoretice <- probabilitate_castig_dupa_r_din_k_esecuri(r, k, numar_extrageri)

  # Simularea
  castiguri_simulate <- replicate(numar_simulare, {
    extrageri <- matrix(sample(1:49, 6*numar_extrageri, replace = TRUE), ncol = 6)
    numar_eșecuri <- sum(apply(extrageri, 1, function(x) sum(x %in% sample(1:49, 6, replace = FALSE)) == 0))
    if (numar_eșecuri >= k) {
      return(r)
    } else {
      return(0)
    }
  })

  # Calculul probabilităților simulate
  probabilitati_simulate <- table(castiguri_simulate)
  probabilitati_simulate <- probabilitati_simulate / numar_simulare

  # Afișarea rezultatelor
  for (i in 1:4) {  # Iterăm doar prin primele 4 categorii
    cat(sprintf("Categorie: %d\n", i))
    if (i %in% names(probabilitati_simulate)) {
      cat(sprintf("Probabilitatea simulată de câștig: %.6f\n", probabilitati_simulate[i]))
    } else {
      cat("Probabilitatea simulată de câștig: 0.000000\n")
    }
    cat(sprintf("Probabilitatea teoretică de câștig: %.6f\n", probabilitati_teoretice[i]))
    cat("---\n")
  }
}

# Exemplu de utilizare: simulare și comparație pentru a câștiga de 3 ori după 5 eșecuri, cu 10^6 simulări și 2 extrageri pe săptămână
simuleaza_si_compara_dupa_r_din_k_esecuri(1, 30, 10^6, 2)

"""e) Probabilitatea de a cȃștiga, ȋn medie, cel puțin o dată pe an, dacă se joacă saptămȃnal
cȃte un bilet simplu, timp de 30 ani.
"""

# Calculul probabilității teoretice de a câștiga cel puțin o dată pe an în 30 de ani
probabilitate_teoretica <- 1 - (1 - (1 - dbinom(0, 6, 1/49))) ^ (52 * 30)

# Simularea pentru probabilitatea de a câștiga cel puțin o dată pe an în 30 de ani
simuleaza_si_compara <- function(numar_simulare) {
  castiguri <- replicate(numar_simulare, {
    castiguri_anuale <- replicate(30, {
      extrageri <- sample(1:49, 6, replace = FALSE)
      numar_corecte <- sum(extrageri %in% sample(1:49, 6, replace = FALSE))
      if (numar_corecte >= 3) {
        return(1)
      } else {
        return(0)
      }
    })
    return(sum(castiguri_anuale) > 0)
  })

  probabilitate_simulata <- sum(castiguri) / numar_simulare
  return(probabilitate_simulata)
}

# Simularea și comparația
probabilitate_simulata <- simuleaza_si_compara(10^6)

# Afișarea rezultatelor
cat(sprintf("Probabilitatea teoretică de a câștiga cel puțin o dată pe an în 30 de ani: %.6f\n", probabilitate_teoretica))
cat(sprintf("Probabilitatea simulată de a câștiga cel puțin o dată pe an în 30 de ani: %.6f\n", probabilitate_simulata))

"""f) Probabilitatea de a juca saptămȃnal, timp de un an, cȃte un bilet simplu și a nu
cȃștiga niciodată
"""

# Probabilitatea de a pierde într-o săptămână
probabilitate_pierdere_saptamanal <- 1 - 1/13983816

# Probabilitatea de a pierde într-un an
probabilitate_pierdere_anual <- probabilitate_pierdere_saptamanal^52

# Afisare probabilitatea de a juca săptămânal, timp de un an, și de a nu câștiga niciodată
cat(sprintf("Probabilitatea de a juca săptămânal, timp de un an, și de a nu câștiga niciodată este: %.10f\n", probabilitate_pierdere_anual))

# Simularea pentru 10^6 valori pentru a nu câștiga niciodată într-un an
simulare_anuala <- rbinom(10^6, 1, probabilitate_pierdere_saptamanal)
probabilitate_simulata_anuala <- mean(simulare_anuala)

# Afișarea rezultatului simulării
cat(sprintf("Probabilitatea simulată de a juca săptămânal, timp de un an, și de a nu câștiga niciodată este: %.10f\n", probabilitate_simulata_anuala))

p_castig_3 <- dbinom(1:49, 3, 1/49)
p_castig_4 <- dbinom(1:49, 4, 1/49)
p_castig_5 <- dbinom(1:49, 5, 1/49)
p_castig_6 <- dbinom(1:49, 6, 1/49)
probabilitati_teoretice <- c(p_castig_3, p_castig_4 - p_castig_3, p_castig_5 - p_castig_4, p_castig_6 - p_castig_5)
probabilitatea_de_a_castiga_intr_o_saptamana=mean(probabilitati_teoretice)
# Probabilitatea de a nu câștiga într-o săptămână
probabilitate_nu_castig_intr_o_saptamana <- 1 - probabilitatea_de_a_castiga_intr_o_saptamana

# Probabilitatea de a nu câștiga niciodată într-un an
probabilitate_nu_castig_intr_un_an <- probabilitate_nu_castig_intr_o_saptamana ^ 52

# Afișarea rezultatului
cat(sprintf("Probabilitatea de a juca săptămânal, timp de un an, și de a nu câștiga niciodată este: %.6f\n", probabilitate_nu_castig_intr_un_an))

"""g) Probabilitatea de a juca saptămȃnal, timp de un an, cȃte un bilet simplu și de a
cȃștiga, cumulat, o sumă mai mare decȃt costul total al biletelor jucate.
"""

# Verificare și definirea corectă a variabilelor cost_bilet și extrageri_anual
cost_bilet <- 7
extrageri_anual <- 52

# Verificare dacă există NA în variabilele cost_bilet și extrageri_anual
if (any(is.na(cost_bilet)) || any(is.na(extrageri_anual))) {
  stop("Variabilele cost_bilet și extrageri_anual trebuie să fie definite și să nu conțină valori lipsă (NA).")
}

# Numărul total de extrageri într-un an
suma_totala_jucata <- cost_bilet * extrageri_anual

# Funcția pentru a calcula probabilitatea de a câștiga o sumă mai mare decât costul total al biletelor jucate
probabilitate_castig_r_numere <- function(r) {
  castiguri <- c(30, 363350, 390000, 1090000)
  probabilitate_castig <- sum(dbinom(r:6, 6, 1/49)[1:(7 - r)] * castiguri[1:(7 - r)])
  return(probabilitate_castig)
}

# Probabilitatea de a câștiga o sumă mai mare decât costul total al biletelor jucate
probabilitate_castig_anual <- sum(sapply(3:6, probabilitate_castig_r_numere))

# Afisare probabilitatea de a juca săptămânal, timp de un an, și de a câștiga o sumă mai mare decât costul total al biletelor jucate
cat(sprintf("Probabilitatea de a juca săptămânal, timp de un an, și de a câștiga o sumă mai mare decât costul total al biletelor jucate este: %.10f\n", probabilitate_castig_anual))

# Simularea pentru 10^6 valori pentru a câștiga o sumă mai mare decât costul total al biletelor jucate într-un an
simulare_castig_anual <- replicate(10^6, {
  castig <- sum(sample(1:49, 6) %in% sample(1:49, 6))
  castiguri <- c(0, 30, 363350, 390000, 1090000)
  castig_total <- sum(castiguri[1:castig])
  if (castig_total > suma_totala_jucata) {
    return(1)
  } else {
    return(0)
  }
})

# Probabilitatea simulată de a câștiga o sumă mai mare decât costul total al biletelor jucate într-un an
probabilitate_simulata_castig_anual <- mean(simulare_castig_anual)

# Afișarea rezultatului simulării
cat(sprintf("Probabilitatea simulată de a juca săptămânal, timp de un an, și de a câștiga o sumă mai mare decât costul total al biletelor jucate este: %.10f\n", probabilitate_simulata_castig_anual))

# Simularea pentru probabilitatea de a câștiga o sumă mai mare decât costul biletelor jucate într-un an
simuleaza_probabilitate_castig <- function(numar_simulare) {
  castiguri <- replicate(numar_simulare, {
    suma_castigata <- sum(sample(1:49, 6, replace = FALSE) %in% sample(1:49, 6, replace = FALSE)) * 30  # Presupunem că fiecare număr corect câștigă 30 de lei
    castiguri_anuale <- suma_castigata > 52 * 7  # 52 de săptămâni într-un an, iar costul unui bilet este de 7 lei
    return(castiguri_anuale)
  })

  probabilitate_castig <- sum(castiguri) / numar_simulare
  return(probabilitate_castig)
}

# Calculul probabilității teoretice de a câștiga o sumă mai mare decât costul biletelor jucate într-un an
probabilitate_teoretica <- 1 - pbinom(52 * 7, 52, dbinom(0:6, 6, 1/49))

# Simularea și comparația
probabilitate_castig <- simuleaza_probabilitate_castig(10^6)

# Afișarea rezultatelor
cat(sprintf("Probabilitatea teoretică de a câștiga o sumă mai mare decât costul biletelor jucate într-un an: %.6f\n", probabilitate_teoretica))
cat(sprintf("Probabilitatea simulată de a câștiga o sumă mai mare decât costul biletelor jucate într-un an: %.6f\n", probabilitate_castig))

"""h) Probabilitatea de a cȃștiga din nou, la orice categorie, ȋn săptămȃna următoare, cu
un bilet simplu, presupunȃnd că ȋn săptămȃna curentă jucătorul a cȃștigat premiul
cel mare.
"""

# Costul unui bilet
cost_bilet <- 7

# Numărul total de extrageri într-un an
extrageri_anual <- 52

# Suma totală jucată într-un an
suma_totala_jucata <- cost_bilet * extrageri_anual

# Funcția pentru a calcula probabilitatea de a câștiga o sumă mai mare decât costul total al biletelor jucate
probabilitate_castig_r_numere <- function(r) {
  castiguri <- c(30, 363350, 390000, 1090000)
  probabilitate_castig <- sum(dbinom(r:6, 6, 1/49)[1:(7 - r)] * castiguri[1:(7 - r)])
  return(probabilitate_castig)
}


# Probabilitatea de a câștiga o sumă mai mare decât costul total al biletelor jucate
probabilitate_castig_anual <- sum(sapply(3:6, probabilitate_castig_r_numere))

# Afisare probabilitatea de a juca săptămânal, timp de un an, și de a câștiga o sumă mai mare decât costul total al biletelor jucate
cat(sprintf("Probabilitatea de a juca săptămânal, timp de un an, și de a câștiga o sumă mai mare decât costul total al biletelor jucate este: %.10f\n", probabilitate_castig_anual))

# Simularea pentru 10^6 valori pentru a câștiga o sumă mai mare decât costul total al biletelor jucate într-un an
simulare_castig_anual <- replicate(10^6, {
  castig <- sum(sample(1:49, 6) %in% sample(1:49, 6))
  castiguri <- c(0, 30, 363350, 390000, 1090000)
  castig_total <- sum(castiguri[1:castig])
  if (castig_total > suma_totala_jucata) {
    return(1)
  } else {
    return(0)
  }
})

# Probabilitatea simulată de a câștiga o sumă mai mare decât costul total al biletelor jucate într-un an
probabilitate_simulata_castig_anual <- mean(simulare_castig_anual)

# Afișarea rezultatului simulării
cat(sprintf("Probabilitatea simulată de a juca săptămânal, timp de un an, și de a câștiga o sumă mai mare decât costul total al biletelor jucate este: %.10f\n", probabilitate_simulata_castig_anual))

# Probabilitatea de a câștiga din nou în săptămâna următoare
probabilitate_castig_din_nou <- probabilitate_castig_anual

# Afisare probabilitatea de a câștiga din nou în săptămâna următoare
cat(sprintf("Probabilitatea de a câștiga din nou, la orice categorie, în săptămâna următoare, cu un bilet simplu, presupunând că în săptămâna curentă jucătorul a câștigat premiul cel mare, este: %.10f\n", probabilitate_castig_din_nou))

# Simularea pentru 10^6 valori pentru a câștiga din nou în săptămâna următoare
simulare_castig_din_nou <- replicate(10^6, {
  castig <- sample(c(30, 363350, 390000, 1090000), 1) # Simulăm câștigul din nou, alegând aleatoriu unul din premiile posibile
  if (castig > suma_totala_jucata) {  # Verificăm dacă câștigul este mai mare decât suma totală jucată
    return(1)
  } else {
    return(0)
  }
})

# Probabilitatea simulată de a câștiga din nou în săptămâna următoare
probabilitate_simulata_castig_din_nou <- mean(simulare_castig_din_nou)

# Afișarea rezultatului simulării
cat(sprintf("Probabilitatea simulată de a câștiga din nou, la orice categorie, în săptămâna următoare, cu un bilet simplu, este: %.10f\n", probabilitate_simulata_castig_din_nou))

"""i) Care este cea mai probabilă combinație de categorii de cȃștiguri realizate pentru un
jucător care cumpără cȃte un bilet simplu pentru fiecare extragere, timp de un an?
(ex. cȃștigă de 12 ori cȃte 3 numere, de 2 ori 4 numere, o data 5 numere și niciodata
cele 6 numere)
"""

# Simularea pentru a determina cea mai probabilă categorie de câștig
simuleaza_categorie_castig <- function(numar_simulare) {
  # Simulăm câte categorii de câștiguri sunt realizate pentru fiecare extragere
  castiguri <- sample(0:6, numar_simulare, replace = TRUE)
  return(castiguri)
}

# Simularea pentru un număr mare de extrageri
numar_simulare <- 10^6
categorii_simulate <- simuleaza_categorie_castig(numar_simulare)

# Calcularea frecvenței fiecărei categorii de câștig
frecventa_categorii <- table(categorii_simulate)

# Identificarea celei mai probabile categorii de câștig
categorie_maxima_probabilitate <- which.max(frecventa_categorii)

# Afișarea rezultatului
cat(sprintf("Cea mai probabilă categorie de câștig este de %d, cu o probabilitate de %.6f și o frecvență de %d în %d simulari.\n", categorie_maxima_probabilitate, frecventa_categorii[categorie_maxima_probabilitate] / numar_simulare, frecventa_categorii[categorie_maxima_probabilitate], numar_simulare))

# Simularea pentru a determina frecvența fiecărei categorii de câștig în decursul unui an
simuleaza_frecventa_categorii <- function(numar_simulare) {
  # Simulăm câte categorii de câștiguri sunt realizate pentru fiecare extragere
  castiguri <- matrix(sample(0:6, 52*numar_simulare, replace = TRUE), ncol = 52)

  # Calculăm frecvența fiecărei categorii de câștig în fiecare extragere
  frecventa_categorii <- apply(castiguri, 2, table)

  # Sumăm frecvența pe categorii
  frecventa_totala <- sapply(frecventa_categorii, sum)

  return(frecventa_totala)
}

# Simularea pentru un număr mare de extrageri
numar_simulare <- 108  # Folosim un număr mai mic de simulari pentru a reduce timpul de rulare
frecventa_categorii <- simuleaza_frecventa_categorii(numar_simulare)

# Afișarea frecvenței fiecărei categorii de câștig în decursul unui an
for (categorie in 0:6) {
  cat(sprintf("Categorie %d: %d aparitii\n", categorie, frecventa_categorii[categorie]))
}

# Simularea pentru a determina cea mai probabilă combinație de câștiguri
simuleaza_combinatie_castiguri <- function(numar_simulare) {
  # Simulăm câte categorii de câștiguri sunt realizate pentru fiecare extragere
  castiguri <- sample(0:6, numar_simulare, replace = TRUE)
  return(castiguri)
}

# Simularea pentru un număr mare de extrageri pentru un an
numar_simulare <- 10^6
combinatii_simulate <- simuleaza_combinatie_castiguri(numar_simulare)

# Calcularea frecvenței fiecărei combinații de câștiguri
frecventa_combinatii <- table(combinatii_simulate)

# Identificarea celei mai probabile combinații de câștiguri
combinație_maxima_probabilitate <- which.max(frecventa_combinatii)

# Afișarea rezultatului
cat(sprintf("Cea mai probabilă combinație de câștiguri este de %d categorii, cu o probabilitate de %.6f\n", combinație_maxima_probabilitate, frecventa_combinatii[combinație_maxima_probabilitate] / numar_simulare))

"""**2) Folosindu-vă de simulare și/sau rezultate teoretice răspundeți justificat la următoarele
ȋntrebări:**

a) Care este cȃștigul mediu anual estimat al Loteriei, știind că există 2 extrageri
săptămȃnale?
"""

# Numărul total de extrageri într-un an
extrageri_anual <- 2 * 52  # 2 extrageri pe săptămână, 52 săptămâni pe an

# Simularea pentru 10^6 extrageri
simulare_castiguri <- replicate(10^6, {
  castig <- sample(0:6, 1, prob = c(13983816, 13983816, 13983816, 13983816, 1, 1, 1))
  return(castig)
})

# Calculul câștigului total obținut într-un an
castig_total_anual <- sum(simulare_castiguri)

# Calculul câștigului mediu anual
castig_mediu_anual <- castig_total_anual / extrageri_anual

# Afișarea rezultatului
cat(sprintf("Câștigul mediu anual estimat al Loteriei, știind că există 2 extrageri săptămânale, este: %.2f lei\n", castig_mediu_anual))

# Definirea numărului de extrageri pe săptămână și numărul de săptămâni pe an
extrageri_saptamanal <- 2
saptamani_an <- 52

# Definirea numărului total de participanți la fiecare extragere
numar_participanti <- 1000

# Definirea probabilităților și a premiilor asociate fiecărei categorii de câștig
probabilitati <- c(0, dbinom(3:6, 6, 1/49))
premii <- c(0, 30, 363350, 390000, 1090000)

# Calcularea câștigului mediu pentru un bilet la o extragere
castig_mediu_per_extragere <- sum(probabilitati * premii)

# Calcularea câștigului mediu pentru un bilet pe săptămână
castig_mediu_pe_saptamana <- castig_mediu_per_extragere * extrageri_saptamanal

# Calcularea câștigului mediu pe an
castig_mediu_anual <- castig_mediu_pe_saptamana * saptamani_an * numar_participanti

# Afișarea câștigului mediu anual estimat al Loteriei
cat(sprintf("Câștigul mediu anual estimat al Loteriei este: %.2f lei\n", castig_mediu_anual))

"""b) Care este numărul minim de bilete simple care trebuie cumpărate ȋntr-un an pentru
ca Loteria să nu fie ȋn pierdere?
"""

# Definim costul unui bilet
cost_bilet <- 7

# Numărul total de extrageri într-un an
extrageri_anual <- 2 * 52  # 2 extrageri pe săptămână, 52 săptămâni pe an

# Funcție pentru a calcula costul total al bilețelor pentru un an
cost_total <- function(numar_bilete) {
  return(numar_bilete * cost_bilet * extrageri_anual)
}

# Probabilitățile de câștig pentru 3, 4, 5 și 6 numere
probabilitati <- dbinom(3:6, 6, 1/49)

# Suma așteptată a câștigurilor
castig_asteptat <- sum(c(30, 363350, 390000, 1090000) * probabilitati)

# Căutăm numărul minim de bilete necesare
numar_bilete_minim <- 1
while (TRUE) {
  cost <- cost_total(numar_bilete_minim)
  if (castig_asteptat >= cost) {
    break
  }
  numar_bilete_minim <- numar_bilete_minim + 1
}

# Afișăm rezultatul
cat(sprintf("Numărul minim de bilete simple care trebuie cumpărate într-un an pentru ca Loteria să nu fie în pierdere este: %d\n", numar_bilete_minim))

# Definirea costului unui bilet simplu
cost_bilet <- 7  # Lei

# Calcularea costului total al biletelor cumpărate într-un an
cost_total_anual <- cost_bilet * extrageri_saptamanal * saptamani_an * numar_participanti

# Calcularea câștigului mediu anual estimat al Loteriei (așa cum am calculat anterior)
castig_mediu_anual <- castig_mediu_pe_saptamana * saptamani_an * numar_participanti

# Calcularea numărului minim de bilete simple necesare pentru ca Loteria să nu fie în pierdere
numar_minim_bilete <- castig_mediu_anual / cost_bilet

# Afișarea rezultatului
cat(sprintf("Numărul minim de bilete simple care trebuie cumpărate într-un an pentru ca Loteria să nu fie în pierdere este: %.0f\n", ceiling(numar_minim_bilete)))

"""c) Un jucător are un buget lunar de 70 lei. Care ar fi stategia optimă de joc(bilete
simple jucate ȋn săptămȃni diferite, un singur bilet cu o variantă complexă jucată o
singură dată etc.) care să-i aducă cele mai mari șanse de cȃștig?Estimați/Calculați
aceste șanse
"""

# Numărul total de extrageri într-o lună
extrageri_lunare <- 4 * 2  # 4 săptămâni * 2 extrageri/săptămână

# Bugetul lunar al jucătorului
buget_lunar <- 70

# Costul unui bilet simplu
cost_bilet_simplu <- 7

# Numărul total de bilete simple pe care jucătorul își poate permite să le cumpere într-o lună
numar_bilete_simple <- floor(buget_lunar / cost_bilet_simplu)

# Probabilitatea de a câștiga cel puțin o dată într-o lună cu un bilet simplu
probabilitate_castig_bilet_simplu <- 1 - (1 - dbinom(0, extrageri_lunare, 6/49))^numar_bilete_simple

# Funcție pentru a simula și estima probabilitatea de câștig pentru variante combinate
estimeaza_probabilitate_variante_combinate <- function(numar_bilete_combinate) {
  castiguri <- c(30, 363350, 390000, 1090000)
  probabilitati <- rep(0, length(castiguri))

  for (i in 1:numar_bilete_combinate) {
    # Generăm o variantă combinată
    varianta_combinata <- sample(1:49, 6)

    # Numărăm câte extrageri sunt potrivite cu varianta combinată
    numar_castiguri <- sum(sample(1:49, 6) %in% varianta_combinata)

    # Actualizăm probabilitățile pentru fiecare categorie de câștig
    probabilitati[numar_castiguri:4] <- probabilitati[numar_castiguri:4] + 1
  }

  # Normalizăm probabilitățile la numărul total de încercări
  probabilitati <- probabilitati / numar_bilete_combinate

  # Estimăm probabilitatea de câștig
  probabilitate_castig <- sum(castiguri * probabilitati)

  return(probabilitate_castig)
}

# Vom simula variante combinate pentru diferite numere de bilete combinate și vom estima probabilitatea de câștig pentru fiecare
probabilitate_maxima <- 0
numar_bilete_optim <- 0
for (i in 1:numar_bilete_simple) {
  probabilitate_combinata <- estimeaza_probabilitate_variante_combinate(i)
  if (probabilitate_combinata > probabilitate_maxima) {
    probabilitate_maxima <- probabilitate_combinata
    numar_bilete_optim <- i
  }
}

# Afișăm rezultatele
cat(sprintf("Probabilitatea maximă estimată de câștig pentru un buget lunar de %d lei este: %.4f\n", buget_lunar, max(probabilitate_castig_bilet_simplu, probabilitate_maxima)))
cat(sprintf("Strategia optimă este de a cumpăra %d bilete simple în fiecare lună.\n", numar_bilete_optim))

# Definirea bugetului lunar și a costului unui bilet simplu
buget_lunar <- 70  # Lei
cost_bilet_simplu <- 7  # Lei
extrageri_saptamanal <- 2  # Extrageri săptămânale

# Calculul numărului maxim de bilete simple pe care o persoană le poate cumpăra într-o lună
numar_maxim_bilete_simplu_lunar <- floor(buget_lunar / cost_bilet_simplu)

# Calculul probabilităților de câștig pentru fiecare categorie de câștig folosind funcția de distribuție binomială
probabilitati_castig_bilet_simplu <- dbinom(3:6, 6, 1/49)

# Calculul șanselor de câștig pentru biletele simple
sansa_castig_bilet_simplu <- sum(probabilitati_castig_bilet_simplu)

# Calculul șanselor de câștig pentru biletele combinate
# Presupunem că o persoană va cumpăra un bilet combinate pe lună
# Calculăm probabilitatea de câștig pentru biletul combinat
numar_combinatii_lunar <- choose(49, 6)
probabilitate_castig_bilet_combinat <- sum(dbinom(3:6, 6, 1/numar_combinatii_lunar))

# Calculul profitului estimat pentru fiecare tip de bilet
profit_bilet_simplu <- sansa_castig_bilet_simplu * 30 * extrageri_saptamanal - cost_bilet_simplu * numar_maxim_bilete_simplu_lunar
profit_bilet_combinat <- probabilitate_castig_bilet_combinat * 30 * extrageri_saptamanal - cost_bilet_simplu

# Afișarea rezultatului
cat(sprintf("Numărul maxim de bilete simple pe care o persoană ar trebui să le cumpere într-o lună pentru a-și maximiza profitul: %d\n", numar_maxim_bilete_simplu_lunar))
cat(sprintf("Numărul de bilete combinate pe care o persoană ar trebui să le cumpere într-o lună pentru a-și maximiza profitul: 1\n"))
cat(sprintf("Profitul estimat pentru biletele simple: %.2f lei\n", profit_bilet_simplu))
cat(sprintf("Profitul estimat pentru biletele combinate: %.2f lei\n", profit_bilet_combinat))

"""d) Care este numărul mediu de cȃștigători de la fiecare categorie de la o extragere?
Puteți identifica o repartiție asociată?
"""

# Funcție pentru a estima numărul mediu de câștigători pentru fiecare categorie
estimeaza_numar_mediu_castigatori <- function(numar_extrageri, numar_bilete) {
  castiguri <- c(30, 363350, 390000, 1090000)
  probabilitati <- dbinom(3:6, 6, 1/49)

  # Simulăm numărul de câștigători pentru fiecare categorie pentru un număr mare de extrageri
  numar_castigatori <- sapply(probabilitati, function(p) rbinom(numar_extrageri, numar_bilete, p))

  # Calculăm media numărului de câștigători pentru fiecare categorie
  numar_mediu_castigatori <- colMeans(numar_castigatori)

  return(numar_mediu_castigatori)
}

# Numărul total de bilete vândute la o extragere
numar_bilete <- 10^6

# Numărul mediu de câștigători pentru fiecare categorie pentru 1000 de extrageri
numar_mediu_castigatori <- estimeaza_numar_mediu_castigatori(1000, numar_bilete)

# Afișăm rezultatele
for (i in 1:length(numar_mediu_castigatori)) {
  cat(sprintf("Numărul mediu de câștigători pentru categoria %d este: %.2f\n", i+2, numar_mediu_castigatori[i]))
}

# Definirea probabilităților de câștig pentru fiecare categorie și numărul total de participanți
probabilitati_castig <- c(30, 363350, 390000, 1090000)  # Probabilitățile de câștig pentru categoriile 3, 4, 5 și 6
numar_participanti <- 1000  # Numărul total de participanți

# Calculul numărului mediu de câștigători pentru fiecare categorie
numar_mediu_castigatori <- probabilitati_castig * numar_participanti

# Afișarea rezultatului
for (i in 1:length(probabilitati_castig)) {
  cat(sprintf("Numărul mediu de câștigători pentru categoria %d este %.2f\n", i+2, numar_mediu_castigatori[i]))
}

"""**3) Loteria dorește să introducă un nou tip de bilet, biletul “stȃnga-dreapta”. Pentru acest
tip de bilet se consideră cȃștigătoare situația ȋn care fie au fost alese exact numerele
cȃștigătoare, fie vecinii săi imediați din stȃnga sau din dreapta, la nivel de rȃnd, conform
aranjării numerelor pe biletul LOTO. De exemplu, dacă este extras 10, dar jucătorul a
ales 9 atunci va fi considerat număr cȃștigător, ȋnsă nu se ȋntȃmplă același lucru ȋn cazul
lui 11(pentru că se află pe alt rȃnd).**

a) Estimați cȃt ar trebui să fie prețul unui asemenea bilet pentru ca jucătorii să fie
interesați să-l cumpere.
"""

# Probabilitatea de câștig pentru biletul "stânga-dreapta"
probabilitate_castig <- 1/49 + 2/49  # Probabilitatea de a alege numărul câștigător sau unul dintre vecinii săi

# Valoarea câștigurilor pentru biletul "stânga-dreapta"
valoare_castiguri <- c(30, 363350, 390000, 1090000)  # Valoarea câștigurilor pentru exact 3, 4, 5 sau 6 numere corecte

# Calculăm valoarea așteptată a câștigului
valoare_asteptata_castig <- sum(probabilitate_castig * valoare_castiguri)

# Marja de profit dorită
marja_profit <- 0.0001 # 20% profit

# Calculăm prețul biletului
pret_bilet <- valoare_asteptata_castig / (1 - marja_profit)

# Afișăm prețul estimat al biletului
cat(sprintf("Prețul estimat al unui bilet \"stânga-dreapta\" ar putea fi de aproximativ %.2f lei.\n", pret_bilet))

# Probabilitățile de câștig pentru fiecare categorie de câștig
probabilitate_3_numere <- choose(3, 6) * choose(46, 3) / choose(49, 6)
probabilitate_4_numere <- choose(4, 6) * choose(45, 2) / choose(49, 6)
probabilitate_5_numere <- choose(5, 6) * choose(44, 1) / choose(49, 6)
probabilitate_6_numere <- choose(6, 6) / choose(49, 6)

# Premiile acordate pentru fiecare categorie de câștig
premiu_3_numere <- 30
premiu_4_numere <- 363350
premiu_5_numere <- 390000
premiu_6_numere <- 1090000

# Calculăm valoarea așteptată a câștigului pentru fiecare categorie de câștig
valoare_asteptata_3_numere <- probabilitate_3_numere * premiu_3_numere
valoare_asteptata_4_numere <- probabilitate_4_numere * premiu_4_numere
valoare_asteptata_5_numere <- probabilitate_5_numere * premiu_5_numere
valoare_asteptata_6_numere <- probabilitate_6_numere * premiu_6_numere

# Calculăm prețul biletului pentru a oferi un raport atractiv între cost și valoarea așteptată a câștigului
pret_bilet <- (valoare_asteptata_3_numere + valoare_asteptata_4_numere + valoare_asteptata_5_numere + valoare_asteptata_6_numere) / 2

# Afișăm prețul estimat al biletului
cat("Prețul estimat al biletului 'stânga-dreapta' ar trebui să fie în jur de", pret_bilet*100, "lei.")

"""b) Estimați cȃt ar trebui să fie prețul minimum al unui asemenea bilet pentru ca Loteria
să fie interesată să-l comercializeze.
"""

# Costurile de producție și operaționale asociate cu biletul "stânga-dreapta" (presupunere)
cost_producie_operational <- 1  # Presupunem că costurile sunt de 1 leu per bilet

# Marja de profit minimă dorită de Loterie
marja_profit_minima <- 0.05  # 5% profit minim

# Calculăm prețul minim al biletului# Probabilitățile de câștig pentru fiecare categorie de câștig
probabilitate_3_numere <- choose(3, 6) * choose(46, 3) / choose(49, 6)
probabilitate_4_numere <- choose(4, 6) * choose(45, 2) / choose(49, 6)
probabilitate_5_numere <- choose(5, 6) * choose(44, 1) / choose(49, 6)
probabilitate_6_numere <- choose(6, 6) / choose(49, 6)

# Premiile acordate pentru fiecare categorie de câștig
premiu_3_numere <- 30
premiu_4_numere <- 363350
premiu_5_numere <- 390000
premiu_6_numere <- 1090000

# Calculăm valoarea așteptată a câștigului pentru fiecare categorie de câștig
valoare_asteptata_3_numere <- probabilitate_3_numere * premiu_3_numere
valoare_asteptata_4_numere <- probabilitate_4_numere * premiu_4_numere
valoare_asteptata_5_numere <- probabilitate_5_numere * premiu_5_numere
valoare_asteptata_6_numere <- probabilitate_6_numere * premiu_6_numere

# Calculăm prețul biletului pentru a oferi un raport atractiv între cost și valoarea așteptată a câștigului
pret_bilet <- (valoare_asteptata_3_numere + valoare_asteptata_4_numere + valoare_asteptata_5_numere + valoare_asteptata_6_numere) / 2

# Afișăm prețul estimat al biletului
cat("Prețul MINIM estimat al biletului 'stânga-dreapta' ar trebui să fie în jur de", pret_bilet*1.05, "lei, cu o marja de profit de 5%")

"""c) Pornind de la a) și b) construiți o animație(folosind, de exemplu, pachetul
animation https://www.jstatsoft.org/article/view/v053i01) care să arate cum
evoluează interesul cumpărătorului și respectiv al Loteriei față de a cumpăra/vinde
asemenea bilete ȋn funcție de modificarea prețului acestuia.
"""

install.packages("gganimate")

# Definirea funcției pentru calculul interesului cumpărătorului și al Loteriei în funcție de prețul biletului
interes <- function(pret) {
  cost_producie_operational <- 1
  marja_profit_minima <- 0.05
  pret_minim_bilet <- cost_producie_operational / (1 - marja_profit_minima)

  interes_cumparator <- ifelse(pret <= pret_minim_bilet, 1, 0)
  interes_loterie <- ifelse(pret >= pret_minim_bilet, 1, 0)

  return(list(interes_cumparator = interes_cumparator, interes_loterie = interes_loterie))
}

# Definirea gamă de prețuri pentru biletul "stânga-dreapta"
preturi <- seq(0.5, 2, by = 0.05)

# Calcularea interesului cumpărătorului și al Loteriei pentru fiecare preț din gamă
interese <- lapply(preturi, interes)

# Plotarea interesului cumpărătorului în funcție de prețul biletului
plot(preturi, sapply(interese, function(x) x$interes_cumparator), type = "l", ylim = c(0, 1),
     xlab = "Prețul biletului", ylab = "Interes", main = "Evoluția interesului cumpărătorului")
abline(h = 0.5, col = "blue", lty = 2)  # Linie orizontală pentru pragul de interes al cumpărătorului

# Plotarea interesului Loteriei în funcție de prețul biletului
plot(preturi, sapply(interese, function(x) x$interes_loterie), type = "l", ylim = c(0, 1),
     xlab = "Prețul biletului", ylab = "Interes", col = "red", main = "Evoluția interesului Loteriei")
abline(h = 0.5, col = "blue", lty = 2)  # Linie orizontală pentru pragul de interes al Loteriei

# Definirea funcției sigmoidă
sigmoid <- function(x, a, b) {
  return(1 / (1 + exp(-a * (1/x - b))))
}

# Definirea intervalului de prețuri pentru biletul "stânga-dreapta"
preturi <- seq(7, 200, by = 1)  # Presupunem un interval de la 7 lei la 200 lei

# Definirea parametrilor funcției sigmoidă
a <- 10  # Coeficientul de înclinare a curbei sigmoidă
b <- 0.01  # Punctul de inflexiune al curbei sigmoidă (inversul prețului la care probabilitatea de cumpărare este 0.5)

# Calculul probabilității de cumpărare pentru fiecare preț
probabilitate_cumparare <- sigmoid(preturi, a, b)

# Crearea graficului
plot(preturi, probabilitate_cumparare, type = "l",
     xlab = "Prețul biletului", ylab = "Probabilitatea de cumpărare",
     main = "Interesul cumpărătorului raportat la prețul biletului",
     col = "blue", lwd = 2)

"""d) Construiți o strategie de a alege numerele cu cele mai mari șanse de cȃștig cu un
asemenea bilet și evaluați care sunt aceste șanse.
"""

# Funcție pentru a alege numerele cu cele mai mari șanse de câștig, luând în considerare frecvența de apariție a numerelor în extragerile anterioare
alege_numere <- function(extrageri_anterioare) {
  # Calculăm frecvența de apariție a fiecărui număr
  frecventa_numere <- table(extrageri_anterioare)

  # Sortăm numerele în ordinea descrescătoare a frecvenței și alegem primele 6
  numere_alese <- as.numeric(names(sort(frecventa_numere, decreasing = TRUE)[1:6]))

  return(numere_alese)
}

# Simularea extragerilor pentru un an
simuleaza_extrageri <- function(nr_extrageri) {
  extrageri_anterioare <- matrix(sample(1:49, 6 * nr_extrageri, replace = TRUE), ncol = 6)
  return(extrageri_anterioare)
}

# Evaluarea strategiei de alegere a numerelor pentru un set de extrageri
evalueaza_strategie <- function(extrageri_anterioare, nr_simulari) {
  numere_potrivite <- numeric(nr_simulari)

  for (i in 1:nr_simulari) {
    extragere_urmatoare <- sample(1:49, 6)
    alegeri_finale <- alege_numere(extrageri_anterioare)
    numere_potrivite[i] <- sum(extragere_urmatoare %in% alegeri_finale)
  }

  return(numere_potrivite)
}

# Numărul de extrageri pentru care dorim să evaluăm strategia
nr_extrageri <- 1000

# Numărul de simulări pentru fiecare set de extrageri
nr_simulari <- 1000

# Simulăm extragerile pentru un an
extrageri_anterioare <- simuleaza_extrageri(nr_extrageri)

# Evaluăm strategia
rezultate_simulare <- evalueaza_strategie(extrageri_anterioare, nr_simulari)

# Identificăm numerele cu cele mai mari șanse de câștig
numere_potrivite <- alege_numere(extrageri_anterioare)

cat("Numerele cu cele mai mari șanse de câștig sunt:", numere_potrivite, "\n")

"""e) Ȋn ce condiții un asemenea bilet ar aduce pentru un jucător regulat un cȃștig mediu
anual estimat ca fiind superior celui unui bilet simplu?
"""

# Definirea premiilor pentru fiecare categorie de câștig
castiguri_stanga_dreapta <- c(30, 363350, 390000, 1090000)
castig_bilet_simplu <- c(0, 0, 0, 0, 0, 10000000)

# Definirea funcției pentru a simula extrageri și a calcula câștigul pentru biletul "stânga-dreapta"
simulare_stanga_dreapta <- function(numar_extrageri) {
  castig_total <- 0
  for (i in 1:numar_extrageri) {
    # Generarea unei extrageri simulate cu șase numere
    extragere <- sample(1:49, 6)
    # Determinarea câștigului pentru extragerea respectivă
    castig <- sum(extragere %in% extragere - 1) # Câștigul este egal cu numărul de numere câștigătoare minus 1
    castig_total <- castig_total + castiguri_stanga_dreapta[castig + 1] # Adăugarea câștigului la câștigul total
  }
  return(castig_total)
}

# Definirea funcției pentru a simula extrageri și a calcula câștigul pentru biletul simplu
simulare_bilet_simplu <- function(numar_extrageri) {
  castig_total <- 0
  for (i in 1:numar_extrageri) {
    # Generarea unei extrageri simulate cu șase numere
    extragere <- sample(1:49, 6)
    # Determinarea câștigului pentru extragerea respectivă
    castig <- sum(extragere %in% extragere)
    castig_total <- castig_total + castig_bilet_simplu[castig + 1] # Adăugarea câștigului la câștigul total
  }
  return(castig_total)
}

# Simularea câștigului pentru biletul "stânga-dreapta"
castig_mediu_anual_stanga_dreapta <- simulare_stanga_dreapta(1000000)
# Simularea câștigului pentru biletul simplu
castig_mediu_anual_bilet_simplu <- simulare_bilet_simplu(1000000)

# Afișarea rezultatelor
cat("Câștigul mediu anual estimat pentru biletul 'stânga-dreapta':", castig_mediu_anual_stanga_dreapta, "\n")
cat("Câștigul mediu anual estimat pentru biletul simplu:", castig_mediu_anual_bilet_simplu, "\n")

# Costul unui bilet simplu
cost_bilet_simplu <- 7

# Numărul de extrageri pe săptămână și numărul de săptămâni pe an
extrageri_saptamana <- 2
saptamani_an <- 52

# Funcție pentru calculul cheltuielii anuale pentru un bilet "stânga-dreapta"
cheltuiala_anuala_stanga_dreapta <- function(pret_bilet, extrageri_anuale) {
  return(pret_bilet * extrageri_anuale)
}

# Funcție pentru calculul venitului mediu anual estimat pentru un bilet "stânga-dreapta"
venit_mediu_anual_stanga_dreapta <- function(probabilitati, castiguri, pret_bilet, extrageri_anuale) {
  castig_total <- sum(probabilitati * castiguri)
  cheltuiala_totala <- cheltuiala_anuala_stanga_dreapta(pret_bilet, extrageri_anuale)
  return(castig_total - cheltuiala_totala)
}

# Probabilități de câștig și castiguri asociate fiecărei categorii pentru un bilet "stânga-dreapta"
# Presupunem că acestea sunt la fel ca pentru un bilet simplu în acest exemplu
probabilitati <- c(0, dbinom(1:6, 6, 1/49))
castiguri <- c(0, 30, 363350, 390000, 1090000, 0)


# Prețuri posibile pentru un bilet "stânga-dreapta"
preturi_stanga_dreapta <- seq(7, 20, by = 1)

# Calculăm venitul mediu anual estimat pentru fiecare preț posibil pentru un bilet "stânga-dreapta"
venit_mediu_anual_estimat <- sapply(preturi_stanga_dreapta, function(pret) {
  venit_mediu_anual_stanga_dreapta(probabilitati, castiguri, pret, extrageri_saptamana * saptamani_an)
})

# Găsim prețul minim pentru care venitul mediu anual estimat devine pozitiv
pret_minim <- min(preturi_stanga_dreapta[venit_mediu_anual_estimat > 0])

# Afisăm rezultatele
cat("Prețul minim pentru care venitul mediu anual estimat devine pozitiv este:", pret_minim)

"""**4) Loteria pune la dispoziție istoricul extragerilor anterioare din ultimii 20 de ani. Ȋn ce
manieră puteți folosi aceste informații pentru a crește șansele de cȃștig cu un bilet
simplu? Justificați răspunsul și ilustrați-l cu grafice relevante.**
"""

# Generăm un set de date fictiv pentru simularea extragerilor anterioare
set.seed(123)
numere_extrase <- matrix(sample(1:49, 1000 * 6, replace = TRUE), ncol = 6)
extrageri <- 1:1000
istoric_extrageri <- data.frame(extragere = extrageri, numere_extrase = apply(numere_extrase, 1, paste, collapse = ","))

# Calculăm frecvența de apariție a fiecărui număr în istoricul extragerilor
frecventa_numere <- table(unlist(strsplit(istoric_extrageri$numere_extrase, ",")))

# Sortăm numerele în funcție de frecvența lor
numere_sortate <- sort(frecventa_numere, decreasing = TRUE)

# Selecționăm primele 10 numere cu cea mai mare frecvență de apariție
numere_cu_cea_mai_mare_frecventa <- names(numere_sortate)[1:10]

# Vizualizăm frecvența de apariție a fiecărui număr
barplot(numere_sortate, main = "Frecvența de apariție a numerelor în istoricul extragerilor",
        xlab = "Numărul", ylab = "Frecvență", col = "skyblue")

# Vizualizăm numerele cu cea mai mare frecvență de apariție
cat("Numerele cu cea mai mare frecvență de apariție sunt:", numere_cu_cea_mai_mare_frecventa)